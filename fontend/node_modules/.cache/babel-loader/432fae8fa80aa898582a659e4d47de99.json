{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shivansh/Desktop/React-Practice/cf-explorer/fontend/src/components/LineGraphMulti.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"./axios\";\nlet Data1, Data2;\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 4\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return tooltipItem.value;\n      },\n      title: function (tooltipItem, data) {\n        console.log(tooltipItem);\n\n        if (tooltipItem.datasetIndex === 0) {\n          return Data1[tooltipItem[0].index + 1].contestName;\n        } else {\n          return Data2[tooltipItem[0].index + 1].contestName;\n        }\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {//   format: \"MM/DD/YY\",\n        //   tooltipFormat: \"ll\",\n      },\n      display: false\n    }],\n    yAxes: [{\n      gridLines: {\n        display: true\n      },\n      ticks: {\n        callback: function (value, index, values) {\n          return value;\n        }\n      }\n    }]\n  }\n};\n\nfunction LineGraph({\n  handles\n}) {\n  _s();\n\n  const [UserRating1, setUserRating1] = useState({});\n  const [UserRating2, setUserRating2] = useState({});\n\n  const buildChartData = data => {\n    const chartData = [];\n    let lastDataPoint;\n    data.forEach(rating => {\n      if (lastDataPoint) {\n        const newDatapoint = {\n          x: rating.ratingUpdateTimeSeconds / 31536000,\n          y: Math.abs(rating.newRating)\n        };\n        chartData.push(newDatapoint);\n      }\n\n      lastDataPoint = rating.newRating;\n    });\n    return chartData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const req1 = await axios.get(`/explore/Rating/${handles[0]}`); // axios returns a promise\n\n      const req2 = await axios.get(`/explore/Rating/${handles[1]}`); // axios returns a promise\n\n      const chartData1 = buildChartData(req1.data);\n      const chartData2 = buildChartData(req2.data);\n      Data1 = req1.data;\n      Data2 = req2.data;\n      setUserRating1(chartData1);\n      setUserRating2(chartData2);\n      console.log(chartData1, chartData2);\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"350px\",\n      width: \"80%\"\n    },\n    children: (UserRating1 === null || UserRating1 === void 0 ? void 0 : UserRating1.length) > 0 && (UserRating2 === null || UserRating2 === void 0 ? void 0 : UserRating2.length) > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        datasets: [{\n          backgroundColor: \"transparent\",\n          borderColor: \"#CC1034\",\n          borderJoinStyle: \"round\",\n          borderWidth: 2,\n          data: UserRating1,\n          pointBackgroundColor: \"yellow\",\n          pointHoverRadius: 5\n        }, {\n          backgroundColor: \"transparent\",\n          borderColor: \"#32cc10\",\n          borderJoinStyle: \"round\",\n          borderWidth: 2,\n          data: UserRating2,\n          pointBackgroundColor: \"orange\",\n          pointHoverRadius: 5\n        }]\n      },\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LineGraph, \"GfwzTZdOTRI3tUN61CRQ6JqiCWg=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["/home/shivansh/Desktop/React-Practice/cf-explorer/fontend/src/components/LineGraphMulti.js"],"names":["React","useState","useEffect","Line","axios","Data1","Data2","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","title","console","log","datasetIndex","index","contestName","scales","xAxes","type","time","yAxes","gridLines","ticks","callback","values","LineGraph","handles","UserRating1","setUserRating1","UserRating2","setUserRating2","buildChartData","chartData","lastDataPoint","forEach","rating","newDatapoint","x","ratingUpdateTimeSeconds","y","Math","abs","newRating","push","fetchData","req1","get","req2","chartData1","chartData2","height","width","length","datasets","backgroundColor","borderColor","borderJoinStyle","borderWidth","pointBackgroundColor","pointHoverRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"./axios\";\n\nlet Data1, Data2;\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 4,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return tooltipItem.value;\n      },\n      title: function (tooltipItem, data) {\n        console.log(tooltipItem);\n        if (tooltipItem.datasetIndex === 0) {\n          return Data1[tooltipItem[0].index + 1].contestName;\n        } else {\n          return Data2[tooltipItem[0].index + 1].contestName;\n        }\n      },\n    },\n  },\n\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          //   format: \"MM/DD/YY\",\n          //   tooltipFormat: \"ll\",\n        },\n        display: false,\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: true,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return value;\n          },\n        },\n      },\n    ],\n  },\n};\n\nfunction LineGraph({ handles }) {\n  const [UserRating1, setUserRating1] = useState({});\n  const [UserRating2, setUserRating2] = useState({});\n\n  const buildChartData = (data) => {\n    const chartData = [];\n    let lastDataPoint;\n    data.forEach((rating) => {\n      if (lastDataPoint) {\n        const newDatapoint = {\n          x: rating.ratingUpdateTimeSeconds / 31536000,\n          y: Math.abs(rating.newRating),\n        };\n        chartData.push(newDatapoint);\n      }\n      lastDataPoint = rating.newRating;\n    });\n    return chartData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const req1 = await axios.get(`/explore/Rating/${handles[0]}`); // axios returns a promise\n      const req2 = await axios.get(`/explore/Rating/${handles[1]}`); // axios returns a promise\n      const chartData1 = buildChartData(req1.data);\n      const chartData2 = buildChartData(req2.data);\n      Data1 = req1.data;\n      Data2 = req2.data;\n      setUserRating1(chartData1);\n      setUserRating2(chartData2);\n      console.log(chartData1, chartData2);\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div style={{ height: \"350px\", width: \"80%\" }}>\n      {UserRating1?.length > 0 && UserRating2?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"transparent\",\n                borderColor: \"#CC1034\",\n                borderJoinStyle: \"round\",\n                borderWidth: 2,\n                data: UserRating1,\n                pointBackgroundColor: \"yellow\",\n                pointHoverRadius: 5,\n              },\n              {\n                backgroundColor: \"transparent\",\n                borderColor: \"#32cc10\",\n                borderJoinStyle: \"round\",\n                borderWidth: 2,\n                data: UserRating2,\n                pointBackgroundColor: \"orange\",\n                pointHoverRadius: 5,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n"]},"metadata":{},"sourceType":"module"}