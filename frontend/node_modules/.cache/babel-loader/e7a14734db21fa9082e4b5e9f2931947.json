{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shivansh/Desktop/React-Practice/cf-explorer/fontend/src/components/LineGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"./axios\";\nimport numeral from \"numeral\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 3\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return tooltipItem.value;\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {//   format: \"MM/DD/YY\",\n        //   tooltipFormat: \"ll\",\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: true\n      },\n      ticks: {\n        callback: function (value, index, values) {\n          return value;\n        }\n      }\n    }]\n  }\n};\n\nfunction LineGraph({\n  handle\n}) {\n  _s();\n\n  const [UserRating, setUserRating] = useState({});\n\n  const buildChartData = data => {\n    const chartData = [];\n    let lastDataPoint;\n    data.forEach(rating => {\n      if (lastDataPoint) {\n        const newDatapoint = {\n          x: rating.ratingUpdateTimeSeconds / 31536000,\n          y: Math.abs(rating.newRating)\n        };\n        chartData.push(newDatapoint);\n      }\n\n      lastDataPoint = rating.newRating;\n    });\n    return chartData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const req = await axios.get(`/explore/Rating/${handle}`); // axios returns a promise\n\n      const chartData = buildChartData(req.data);\n      setUserRating(chartData);\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"80%\",\n      height: \"350px\"\n    },\n    children: (UserRating === null || UserRating === void 0 ? void 0 : UserRating.length) > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        datasets: [{\n          // backgroundColor: \"rgba(204, 16, 52, 0.8)\",\n          borderColor: \"#CC1034\",\n          borderJoinStyle: \"round\",\n          borderWidth: 2,\n          data: UserRating\n        }]\n      },\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LineGraph, \"dLPCRtczgID4tnYm8chwYJ+MG9s=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["/home/shivansh/Desktop/React-Practice/cf-explorer/fontend/src/components/LineGraph.js"],"names":["React","useState","useEffect","Line","axios","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","scales","xAxes","type","time","yAxes","gridLines","ticks","callback","index","values","LineGraph","handle","UserRating","setUserRating","buildChartData","chartData","lastDataPoint","forEach","rating","newDatapoint","x","ratingUpdateTimeSeconds","y","Math","abs","newRating","push","fetchData","req","get","width","height","length","datasets","borderColor","borderJoinStyle","borderWidth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"./axios\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 3,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return tooltipItem.value;\n      },\n    },\n  },\n\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          //   format: \"MM/DD/YY\",\n          //   tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: true,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return value;\n          },\n        },\n      },\n    ],\n  },\n};\n\nfunction LineGraph({ handle }) {\n  const [UserRating, setUserRating] = useState({});\n\n  const buildChartData = (data) => {\n    const chartData = [];\n    let lastDataPoint;\n    data.forEach((rating) => {\n      if (lastDataPoint) {\n        const newDatapoint = {\n          x: rating.ratingUpdateTimeSeconds / 31536000,\n          y: Math.abs(rating.newRating),\n        };\n        chartData.push(newDatapoint);\n      }\n      lastDataPoint = rating.newRating;\n    });\n    return chartData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const req = await axios.get(`/explore/Rating/${handle}`); // axios returns a promise\n      const chartData = buildChartData(req.data);\n      setUserRating(chartData);\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div style={{ width: \"80%\", height: \"350px\" }}>\n      {UserRating?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                // backgroundColor: \"rgba(204, 16, 52, 0.8)\",\n                borderColor: \"#CC1034\",\n                borderJoinStyle: \"round\",\n                borderWidth: 2,\n                data: UserRating,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n"]},"metadata":{},"sourceType":"module"}