{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shivansh/Desktop/React-Practice/cf-explorer/fontend/src/components/LineGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"./axios\";\nimport numeral from \"numeral\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nfunction LineGraph({\n  handle\n}) {\n  _s();\n\n  const [UserRating, setUserRating] = useState({});\n\n  const buildChartData = data => {\n    const chartData = [];\n    let lastDataPoint;\n\n    for (let rating in data) {\n      if (lastDataPoint) {\n        const newDatapoint = {\n          x: rating.ratingUpdateTimeSeconds,\n          y: rating.newRating - rating.oldRating\n        };\n        chartData.push(newDatapoint);\n      }\n\n      lastDataPoint = rating.newRating;\n    }\n\n    return chartData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const req = await axios.get(`/explore/Rating/${handle}`); // axios returns a promise\n\n      const chartData = buildChartData(req.data);\n      setUserRating(chartData);\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: (UserRating === null || UserRating === void 0 ? void 0 : UserRating.length) > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        datasets: [{\n          backgroundColor: \"rgba(204, 16, 52, 0.8)\",\n          borderColor: \"#CC1034\",\n          data: UserRating\n        }]\n      },\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LineGraph, \"dLPCRtczgID4tnYm8chwYJ+MG9s=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["/home/shivansh/Desktop/React-Practice/cf-explorer/fontend/src/components/LineGraph.js"],"names":["React","useState","useEffect","Line","axios","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","handle","UserRating","setUserRating","buildChartData","chartData","lastDataPoint","rating","newDatapoint","x","ratingUpdateTimeSeconds","y","newRating","oldRating","push","fetchData","req","get","length","datasets","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"./axios\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nfunction LineGraph({ handle }) {\n  const [UserRating, setUserRating] = useState({});\n\n  const buildChartData = (data) => {\n    const chartData = [];\n    let lastDataPoint;\n    for (let rating in data) {\n      if (lastDataPoint) {\n        const newDatapoint = {\n          x: rating.ratingUpdateTimeSeconds,\n          y: rating.newRating - rating.oldRating,\n        };\n        chartData.push(newDatapoint);\n      }\n      lastDataPoint = rating.newRating;\n    }\n    return chartData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const req = await axios.get(`/explore/Rating/${handle}`); // axios returns a promise\n      const chartData = buildChartData(req.data);\n      setUserRating(chartData);\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      {UserRating?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.8)\",\n                borderColor: \"#CC1034\",\n                data: UserRating,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n"]},"metadata":{},"sourceType":"module"}